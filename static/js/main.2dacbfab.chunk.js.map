{"version":3,"sources":["components/Display.js","components/Timer.js","components/Song.js","components/Sidebar.js","components/FileUpload.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Component","Timer","props","state","time","passTime","bind","setInterval","this","forfeit_status","gameWon","setState","number","slice","id","className","padNumber","Math","floor","Song","discoveredWords","forfeit","getLyrics","setSong","discover","checkWord","lyricDiscovered","getSong","request","XMLHttpRequest","open","match","params","genius_id","onreadystatechange","readyState","status","getResponseHeader","indexOf","JSON","parse","responseText","response","song","send","url","$","cheerio","load","s","console","log","title","album","name","primary_artist","text","replace","trim","split","filter","word","lyrics","index","temp","lyric","toLowerCase","map","w","wordsEquivalent","includes","event","target","value","forEach","stringify","Input","type","disabled","onChange","length","onClick","key","Sidebar","expanded","toggle","children","FileUpload","search","results","readText","updateInput","getSearchResults","listenForEnter","obj","result","track","artist","hits","hit","lyrics_path","path","song_path","api_path","endpoint","callback","window","location","href","getGenius","encodeURI","keyCode","placeholder","onKeyDown","renderSearch","Game","pathname","render","exact","withRouter","App","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2eAKsBA,Y,gBCgCLC,G,mBA9Bb,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,GAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALD,E,iFASfC,YAAYC,KAAKH,SAAU,O,iCAKxBG,KAAKN,MAAMO,gBAAkBD,KAAKN,MAAMQ,WAC3CF,KAAKG,SAAS,CAAEP,KAAMI,KAAKL,MAAMC,KAAK,M,gCAGhCQ,GACN,GAAGA,EAAO,IAAM,OAAQ,IAAIA,GAAQC,OAAO,K,+BAI3C,OACI,yBAAKC,GAAG,QAAQC,UAAWP,KAAKN,MAAMO,eAAiB,UAAYD,KAAKN,MAAMQ,UAAY,MAAQ,IAC5FF,KAAKQ,UAAUC,KAAKC,MAAMV,KAAKL,MAAMC,KAAX,MAA6B,IAD7D,IACmEI,KAAKQ,UAAUC,KAAKC,MAAMV,KAAKL,MAAMC,KAAO,IAAM,IADrH,IAC2HI,KAAKQ,UAAUR,KAAKL,MAAMC,KAAO,S,GA3BpJJ,cC2HHmB,E,YAxHb,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTiB,gBAAkB,GAClBC,SAAS,GAEb,EAAKC,UAAY,EAAKA,UAAUhB,KAAf,gBACjB,EAAKiB,QAAU,EAAKA,QAAQjB,KAAb,gBACf,EAAKkB,SAAW,EAAKA,SAASlB,KAAd,gBAChB,EAAKe,QAAU,EAAKA,QAAQf,KAAb,gBACf,EAAKmB,UAAY,EAAKA,UAAUnB,KAAf,gBACjB,EAAKI,QAAU,EAAKA,QAAQJ,KAAb,gBACf,EAAKoB,gBAAkB,EAAKA,gBAAgBpB,KAArB,gBAZR,E,iFAgBfE,KAAKmB,Y,gCAIL,IAAML,EAAYd,KAAKc,UACnBM,EAAU,IAAIC,eAElBD,EAAQE,KAAK,MAAO,gCAAkCtB,KAAKN,MAAM6B,MAAMC,OAAOC,UAAY,kFAA0B,GACpHL,EAAQM,mBAAqB,WACE,IAAvBN,EAAQO,YAAuC,MAAnBP,EAAQQ,SAEP,IADlBR,EAAQS,kBAAkB,gBAC5BC,QAAQ,SACbhB,EAAUiB,KAAKC,MAAMZ,EAAQa,cAAcC,SAASC,QAIhEf,EAAQgB,S,gCAGFD,GACN,IAAMpB,EAAUf,KAAKe,QACjBK,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,uCAAwCa,EAAKE,KAAK,GACtEjB,EAAQM,mBAAqB,WACzB,GAA2B,IAAvBN,EAAQO,YAAuC,MAAnBP,EAAQQ,QAEP,IADlBR,EAAQS,kBAAkB,gBAC5BC,QAAQ,QAAe,CAC5B,IAAMQ,EAAIC,IAAQC,KAAKpB,EAAQa,cAC3BQ,EAAI,GACRC,QAAQC,IAAIR,GACZM,EAAC,MAAYN,EAAKS,MAAQT,EAAKS,MAAQ,MACvCH,EAAC,MAAYN,EAAKU,MAAQV,EAAKU,MAAMC,KAAO,MAC5CL,EAAC,OAAaN,EAAKY,eAAiBZ,EAAKY,eAAeD,KAAO,MAC/DL,EAAC,OAAYH,EAAE,WAAWU,OAAOC,QAAQ,UAAW,IAAIC,OAAOD,QAAQ,kBAAS,KAAME,MAAO,sBAAuBC,QAAO,SAACC,GAAD,MAAmB,KAATA,GAAeA,KACpJX,QAAQC,IAAIF,EAAEa,QACdvC,EAAQ0B,KAIpBrB,EAAQgB,S,gCAIRpC,KAAKG,SAAS,CAACF,gBAAgB,M,8BAG3BkC,GACJnC,KAAKG,SAAS,CAACgC,KAAMA,EAAMvB,gBAAiB,GAAIC,SAAS,M,+BAGpDwC,EAAME,GACX,IAAIC,EAAOxD,KAAKL,MAAMiB,gBACtB4C,EAAKD,GAAOF,EACZrD,KAAKG,SAAS,CAACS,gBAAkB4C,M,sCAGrBC,EAAOJ,GACnB,OAAOI,EAAMC,cAAcT,QAAQ,KAAM,IAAIC,SAAWG,EAAKK,cAAcT,QAAQ,KAAM,IAAIC,S,sCAGjFG,GAAO,IAAD,OAClB,OAAQrD,KAAKL,MAAMiB,gBAAgB+C,KAAI,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,EAAGP,MAAOS,UAAS,K,gCAGhFC,GAAQ,IAAD,OACTV,EAAOU,EAAMC,OAAOC,MACpBjE,KAAKkB,gBAAgBmC,IACzBrD,KAAKL,MAAMwC,KAAKmB,OAAOY,SAAQ,SAACN,EAAGL,GAC5B,EAAKM,gBAAgBD,EAAGP,KACvB,EAAKrC,SAAS4C,EAAGL,GACjBQ,EAAMC,OAAOC,MAAQ,S,gCAM7B,OAAOlC,KAAKoC,UAAUnE,KAAKL,MAAMiB,mBAAqBmB,KAAKoC,UAAUnE,KAAKL,MAAMwC,KAAKmB,U,+BAGhF,IAAD,OAEJ,OADAZ,QAAQC,IAAI3C,KAAKL,OAEb,yBAAKW,GAAG,iBAEuB,oBAAnBN,KAAKL,MAAMwC,KACjB,yBAAK7B,GAAG,WACLN,KAAKE,WAAa,yBAAKI,GAAG,UAAR,YACnB,kBAAC8D,EAAA,EAAD,CAAOC,KAAK,SAASC,SAAUtE,KAAKL,MAAMM,gBAAkBD,KAAKE,UAAWqE,SAAUvE,KAAKiB,YAC3F,yBAAKX,GAAG,QACJ,6BAAMN,KAAKL,MAAMiB,gBAAgBwC,QAAO,SAACC,GAAD,OAAUA,KAAMmB,OAAxD,MAAmExE,KAAKL,MAAMwC,KAAKmB,OAAOkB,QAC1F,kBAAC,EAAD,CAAOvE,eAAgBD,KAAKL,MAAMM,eAAgBC,QAASF,KAAKE,UAChE,4BAAQoE,SAAUtE,KAAKL,MAAMM,gBAAkBD,KAAKE,UAAWuE,QAASzE,KAAKa,SAA7E,aAEFb,KAAKL,MAAMM,gBAAkBD,KAAKE,YAAc,yBAAKI,GAAG,aAAaC,UAAWP,KAAKL,MAAMM,eAAiB,UAAY,OAAQD,KAAKL,MAAMwC,KAAKS,OAClJ,yBAAKtC,GAAG,UACHN,KAAKL,MAAMwC,KAAKmB,OAAOK,KAAI,SAACN,EAAME,GAAP,OAAiB,yBAAKmB,IAAKnB,EAAOhD,UAAW,SAAW,EAAKW,gBAAgBmC,GAAQ,GAAK,EAAK1D,MAAMM,eAAiB,UAAY,iBAAkBoD,QAGtL,kB,GAnHC7D,a,iBCuBFmF,G,mBAxBb,WAAYjF,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTiF,UAAU,GAEd,EAAKC,OAAS,EAAKA,OAAO/E,KAAZ,gBALC,E,sEASfE,KAAKG,SAAS,CAAEyE,UAAW5E,KAAKL,MAAMiF,a,+BAItC,OACI,yBAAKtE,GAAG,UAAUC,UAAWP,KAAKL,MAAMiF,SAAW,YAAc,IAC7D,yBAAKtE,GAAG,UACHN,KAAKL,MAAMiF,SAAW,yBAAKtE,GAAG,SAAR,KAA0B,GACjD,kBAAC,IAAD,CAAUA,GAAG,OAAQmE,QAASzE,KAAK6E,UAEtC7E,KAAKL,MAAMiF,SAAW5E,KAAKN,MAAMoF,SAAW,Q,GArBvCtF,cC6JLuF,G,mBA1Jb,WAAYrF,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTqF,OAAQ,GACRC,QAAS,IAEb,EAAKC,SAAW,EAAKA,SAASpF,KAAd,gBAChB,EAAKqF,YAAc,EAAKA,YAAYrF,KAAjB,gBACnB,EAAKsF,iBAAmB,EAAKA,iBAAiBtF,KAAtB,gBACxB,EAAKkF,OAAS,EAAKA,OAAOlF,KAAZ,gBACd,EAAKuF,eAAiB,EAAKA,eAAevF,KAApB,gBAVR,E,sEA+CTkD,GACL,IAAIsC,EAAMvD,KAAKC,MAAMgB,GACjBM,EAASgC,EAAIC,OAAOC,MAAMxC,KAAKE,OAAOD,QAAQ,kBAAS,KACvDd,EAAO,GACXA,EAAI,MAAYmD,EAAIC,OAAOC,MAAM1C,KACjCX,EAAI,OAAamD,EAAIC,OAAOE,OAC5BtD,EAAI,OAAamB,EAAOH,MAAO,sBAAuBC,QAAO,SAACC,GAAD,MAAmB,KAATA,GAAeA,KACtFrD,KAAKN,MAAMqB,QAAQoB,K,uCAiBNmD,GACb,IAAIL,EAAUK,EAAIpD,SAASwD,KAAK/B,KAAI,SAACgC,GAAS,MAAO,CAAC/C,MAAO+C,EAAIJ,OAAO3C,MAAO6C,OAAQE,EAAIJ,OAAOxC,eAAeD,KAAM8C,YAAaD,EAAIJ,OAAOM,KAAMC,UAAWH,EAAIJ,OAAOQ,aAC3KrD,QAAQC,IAAI2C,GACZ5C,QAAQC,IAAIsC,GACZjF,KAAKG,SAAS,CAAC8E,QAASA,M,gCAGlBK,GACN,IAAIlE,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,uCAAwCgE,EAAIpD,SAASC,KAAKE,KAAK,GACnFjB,EAAQM,mBAAqB,WACzB,GAA2B,IAAvBN,EAAQO,YAAuC,MAAnBP,EAAQQ,QAEP,IADlBR,EAAQS,kBAAkB,gBAC5BC,QAAQ,QAAe,CAC5B,IACIwB,EADMf,IAAQC,KAAKpB,EAAQa,aAClBK,CAAE,WAAWU,OAE1BM,GADAA,EAASA,EAAOL,QAAQ,UAAW,KACnBC,OAAOD,QAAQ,kBAAS,KAAME,MAAO,sBAAuBC,QAAO,SAACC,GAAD,MAAmB,KAATA,GAAeA,OAIxHjC,EAAQgB,S,gCAGF4D,EAAUC,GAChB,IAAI7E,EAAU,IAAIC,eAClBqB,QAAQC,IAAI,yBAA2BqD,EAAW,kFAClD5E,EAAQE,KAAK,MAAO,yBAA2B0E,EAAW,kFAAkF,GAC5I5E,EAAQM,mBAAqB,WACE,IAAvBN,EAAQO,YAAuC,MAAnBP,EAAQQ,SAEP,IADlBR,EAAQS,kBAAkB,gBAC5BC,QAAQ,UACbY,QAAQC,IAAIZ,KAAKC,MAAMZ,EAAQa,eAC/BgE,EAASlE,KAAKC,MAAMZ,EAAQa,kBAIxCb,EAAQgB,S,qCAIR,OACIpC,KAAKL,MAAMsF,QAAQtB,KAAI,SAAC4B,GAAD,OAAU,6BAAK,4BAAQd,QAAS,WAAKyB,OAAOC,SAASC,KAAOb,EAAOO,YAAaP,EAAO3C,MAAxE,OAAkF,2BAAI2C,EAAOE,e,kCAI/H1B,GACR/D,KAAKG,SAAS,CAAC6E,OAAQjB,EAAMC,OAAOC,U,+BAIpCjE,KAAKqG,UAAU,aAAaC,UAAUtG,KAAKL,MAAMqF,QAAShF,KAAKoF,oB,qCAGpDrB,GACW,KAAlBA,EAAMwC,SACNvG,KAAKgF,W,+BAKT,OAGI,yBAAK1E,GAAG,UAGJ,yBAAKA,GAAG,UACJ,kBAAC8D,EAAA,EAAD,CAAOoC,YAAY,kBAAkBjC,SAAUvE,KAAKmF,YAAcsB,UAAWzG,KAAKqF,iBAClF,4BAAQZ,QAASzE,KAAKgF,QAAtB,WAGHhF,KAAK0G,oB,GAjJGlH,cCGnBmH,E,YACF,WAAYjH,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAyBf,OADA+C,QAAQC,IAAIuD,OAAOC,SAASS,UAExB,yBAAKtG,GAAG,QACJ,kBAAC,EAAD,KACI,yBAAKA,GAAG,QACJ,kBAAC,EAAD,CAAYS,QAASf,KAAKe,YAIlC,kBAAC,IAAD,CAAQoF,SAAUD,OAAOC,UACjB,kBAAC,IAAD,CAAON,KAAK,QAAQgB,OAAQ,kBAAI,+CAChC,kBAAC,IAAD,CACIC,OAAK,EACLjB,KAAK,IACLgB,OAAQ,SAACnH,GAAD,OAAW,yBAAKY,GAAG,QACH,yBAAKC,UAAU,OAAf,gDACA,kGAG5B,kBAAC,IAAD,CACIsF,KAAK,oBACLgB,OAAQ,SAACnH,GAAD,OAAW,kBAAC,EAASA,Y,GA9CtCF,aAuDFuH,cAAWJ,G,OCnDbK,MARf,WACE,OACE,yBAAKzG,UAAU,OACX,kBAAC,EAAD,QCKY0G,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAAS3F,MACvB,2D,aCVN4F,IAASN,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OACOO,SAASC,eAAe,SDwHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2dacbfab.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nimport \"../styles/Display.scss\"\r\n\r\nclass Display extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            discoveredWords : [],\r\n            forfeit: false,\r\n            timer: 0\r\n        }\r\n        this.checkWord = this.checkWord.bind(this)\r\n        this.lyricDiscovered = this.lyricDiscovered.bind(this)\r\n    }\r\n\r\n    wordsEquivalent(lyric, word) {\r\n        return lyric.toLowerCase().replace(\"'\", \"\").trim() === word.toLowerCase().replace(\"'\", \"\").trim()\r\n    }\r\n\r\n    lyricDiscovered(word) {\r\n        return (this.props.discoveredWords.map((w) => this.wordsEquivalent(w, word)).includes(true))\r\n    }\r\n\r\n    checkWord(event) {\r\n        let word = event.target.value\r\n        if (this.lyricDiscovered(word)) return;\r\n        this.props.song.lyrics.forEach((w, index) => {\r\n            if(this.wordsEquivalent(w, word)) {\r\n                this.props.discover(w, index);\r\n                event.target.value = \"\"\r\n            }\r\n        })\r\n    }\r\n\r\n    gameWon(){\r\n        return JSON.stringify(this.props.discoveredWords) === JSON.stringify(this.props.song.lyrics)\r\n    }\r\n    \r\n    render(){\r\n        return ( \r\n            <div id=\"outer_display\">\r\n                \r\n                {typeof this.props.song != \"undefined\"\r\n                ? <div id=\"display\">\r\n                    {this.gameWon() && <div id=\"winner\">You won!</div>}\r\n                    <Input type=\"search\" disabled={this.props.forfeit_status || this.gameWon()} onChange={this.checkWord}/> \r\n                    <div id=\"info\">\r\n                        {this.props.discoveredWords.filter((word) => word).length} / {this.props.song.lyrics.length}\r\n                        <button disabled={this.props.forfeit_status || this.gameWon()} onClick={this.props.forfeit}>Forfeit</button>\r\n                    </div>\r\n                    {(this.props.forfeit_status || this.gameWon()) && <div id=\"song_title\" className={this.props.forfeit_status ? \"forfeit\" : \"won\"}>{this.props.song.title}</div>}\r\n                    <div id=\"lyrics\">\r\n                        {this.props.song.lyrics.map((word, index) => <div key={index} className={\"word \" + (this.lyricDiscovered(word) ? \"\" : this.props.forfeit_status ? \"forfeit\" : \"undiscovered\")}>{word}</div>)}\r\n                    </div>\r\n                </div>\r\n                : <div>\r\n                    <div id=\"home\">Guess the lyrics...without knowing the song.</div>\r\n                    <div>Start by expanding the sidebar and choosing an album to play.</div>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n    }\r\n} export default Display;","import React, { Component } from 'react'\r\nimport { FaBars as MenuIcon } from 'react-icons/fa'\r\nimport \"../styles/Timer.scss\"\r\n\r\n\r\nclass Timer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            time: 0\r\n        }\r\n        this.passTime = this.passTime.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(this.passTime, 1000);\r\n    }\r\n\r\n\r\n    passTime() {\r\n        if(this.props.forfeit_status || this.props.gameWon()) return\r\n        this.setState({ time: this.state.time+1 })\r\n    }\r\n\r\n    padNumber(number) {\r\n        if(number<100 ) return (\"0\"+number).slice(-2)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"timer\" className={this.props.forfeit_status ? \"forfeit\" : this.props.gameWon() ? \"won\" : \"\"}>\r\n                 {this.padNumber(Math.floor(this.state.time / (60*60)) % 24)}:{this.padNumber(Math.floor(this.state.time / 60) % 60)}:{this.padNumber(this.state.time % 60)}\r\n            </div>\r\n        );\r\n    \r\n    }\r\n} export default Timer;","import React, {Component} from 'react'\r\nimport { Input } from 'reactstrap'\r\nimport cheerio from 'cheerio';\r\nimport Timer from './Timer'\r\nimport \"../styles/Display.scss\"\r\nimport { FaThinkPeaks } from 'react-icons/fa';\r\n\r\nclass Song extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            discoveredWords : [],\r\n            forfeit: false,\r\n        }\r\n        this.getLyrics = this.getLyrics.bind(this);\r\n        this.setSong = this.setSong.bind(this);\r\n        this.discover = this.discover.bind(this)\r\n        this.forfeit = this.forfeit.bind(this)\r\n        this.checkWord = this.checkWord.bind(this)\r\n        this.gameWon = this.gameWon.bind(this)\r\n        this.lyricDiscovered = this.lyricDiscovered.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSong();\r\n    }\r\n\r\n    getSong() {\r\n        const getLyrics = this.getLyrics;\r\n        var request = new XMLHttpRequest();\r\n        const token = \"4qtBMiQeR5pD1zFm-vGmFV6j5khGAiRQskTCLXyuGbxeYGbnXrTnXIyA5n2iXjdg\"\r\n        request.open('GET', 'https://api.genius.com/songs/' + this.props.match.params.genius_id + '?access_token=' + token, true);\r\n        request.onreadystatechange = () => {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                var type = request.getResponseHeader('Content-Type');\r\n                if (type.indexOf(\"text\") !== 1) {\r\n                    getLyrics(JSON.parse(request.responseText).response.song)\r\n                }\r\n            }\r\n        }\r\n        request.send();\r\n    }\r\n\r\n    getLyrics(song) {\r\n        const setSong = this.setSong;\r\n        var request = new XMLHttpRequest();\r\n        request.open('GET', 'https://cors-anywhere.herokuapp.com/'+ song.url, true);\r\n        request.onreadystatechange = () => {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                var type = request.getResponseHeader('Content-Type');\r\n                if (type.indexOf(\"text\") !== 1) {\r\n                    const $ = cheerio.load(request.responseText)\r\n                    let s = {}\r\n                    console.log(song)\r\n                    s[\"title\"] = song.title ? song.title : \"N/A\"\r\n                    s[\"album\"] = song.album ? song.album.name : \"N/A\"\r\n                    s[\"artist\"] = song.primary_artist ? song.primary_artist.name : \"N/A\"\r\n                    s[\"lyrics\"]= $('.lyrics').text().replace(/\\[.*\\]/g, \"\").trim().replace(/[’‘]/g, '\\'').split((/[\\r\\n, ?!:;().\"-]+/)).filter((word) => word !== \"\" && word)\r\n                    console.log(s.lyrics)\r\n                    setSong(s)\r\n                }\r\n            }\r\n        }\r\n        request.send();\r\n    }\r\n\r\n    forfeit() {\r\n        this.setState({forfeit_status: true})\r\n    }\r\n    \r\n    setSong(song) {\r\n        this.setState({song: song, discoveredWords: [], forfeit: false})\r\n    }\r\n\r\n    discover(word, index) {\r\n        let temp = this.state.discoveredWords\r\n        temp[index]=word;\r\n        this.setState({discoveredWords : temp})\r\n    }\r\n\r\n    wordsEquivalent(lyric, word) {\r\n        return lyric.toLowerCase().replace(/'/g, \"\").trim() === word.toLowerCase().replace(/'/g, \"\").trim()\r\n    }\r\n\r\n    lyricDiscovered(word) {\r\n        return (this.state.discoveredWords.map((w) => this.wordsEquivalent(w, word)).includes(true))\r\n    }\r\n\r\n    checkWord(event) {\r\n        let word = event.target.value\r\n        if (this.lyricDiscovered(word)) return;\r\n        this.state.song.lyrics.forEach((w, index) => {\r\n            if(this.wordsEquivalent(w, word)) {\r\n                this.discover(w, index);\r\n                event.target.value = \"\"\r\n            }\r\n        })\r\n    }\r\n\r\n    gameWon(){\r\n        return JSON.stringify(this.state.discoveredWords) === JSON.stringify(this.state.song.lyrics)\r\n    }\r\n    \r\n    render(){\r\n        console.log(this.state)\r\n        return ( \r\n            <div id=\"outer_display\">\r\n                \r\n                {typeof this.state.song != \"undefined\"\r\n                ? <div id=\"display\">\r\n                    {this.gameWon() && <div id=\"winner\">You won!</div>}\r\n                    <Input type=\"search\" disabled={this.state.forfeit_status || this.gameWon()} onChange={this.checkWord}/> \r\n                    <div id=\"info\">\r\n                        <div>{this.state.discoveredWords.filter((word) => word).length} / {this.state.song.lyrics.length}</div>\r\n                        <Timer forfeit_status={this.state.forfeit_status} gameWon={this.gameWon}/>\r\n                        <button disabled={this.state.forfeit_status || this.gameWon()} onClick={this.forfeit}>Forfeit</button>\r\n                    </div>\r\n                    {(this.state.forfeit_status || this.gameWon()) && <div id=\"song_title\" className={this.state.forfeit_status ? \"forfeit\" : \"won\"}>{this.state.song.title}</div>}\r\n                    <div id=\"lyrics\">\r\n                        {this.state.song.lyrics.map((word, index) => <div key={index} className={\"word \" + (this.lyricDiscovered(word) ? \"\" : this.state.forfeit_status ? \"forfeit\" : \"undiscovered\")}>{word}</div>)}\r\n                    </div>\r\n                </div>\r\n                : \"Loading...\"\r\n                }\r\n            </div>\r\n        );\r\n    \r\n    }\r\n} export default Song;","import React, { Component } from 'react'\r\nimport { FaBars as MenuIcon } from 'react-icons/fa'\r\nimport \"../styles/Sidebar.scss\"\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ expanded: !this.state.expanded })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"sidebar\" className={this.state.expanded ? \" expanded\" : \"\"}>\r\n                <div id=\"header\">\r\n                    {this.state.expanded ? <div id=\"title\"> </div> : \"\" }                   \r\n                    <MenuIcon id=\"icon\"  onClick={this.toggle}/>\r\n                </div>\r\n                {this.state.expanded ? this.props.children : \"\"}\r\n            </div>\r\n        );\r\n    \r\n    }\r\n} export default Sidebar;","import React, {Component} from 'react'\r\nimport { Input } from 'reactstrap'\r\nimport cheerio from 'cheerio';\r\nimport '../styles/FileUpload.scss'\r\n\r\nclass FileUpload extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            search: \"\",\r\n            results: []\r\n        }\r\n        this.readText = this.readText.bind(this)\r\n        this.updateInput = this.updateInput.bind(this)\r\n        this.getSearchResults = this.getSearchResults.bind(this)\r\n        this.search = this.search.bind(this)\r\n        this.listenForEnter = this.listenForEnter.bind(this)\r\n    }\r\n\r\n    // processLyrics(raw) {\r\n    //     let lyrics = []\r\n    //     raw.forEach( line => {\r\n    //         line.split(/[, ?!:;().\"-]/).forEach ( word => {\r\n    //             if(word.length!==0) {\r\n    //                lyrics.push(word)\r\n    //             }\r\n    //         });\r\n    //     });\r\n    //     return lyrics\r\n    // }\r\n\r\n    // readFile(raw) {\r\n    //     let raw_arr = raw.split(\"\\n\")\r\n    //     let song = {}\r\n    //     song[\"title\"] = raw_arr[0]\r\n    //     song[\"artist\"] = raw_arr[1]\r\n    //     song[\"album\"] = raw_arr[2]\r\n    //     song[\"lyrics\"] = this.processLyrics(raw_arr.slice(3))\r\n\r\n    //     return song;\r\n    // }\r\n    \r\n    // getFile(event) {\r\n    //     let reader = new FileReader();\r\n    //     reader.onload = function(event) {\r\n    //         let fileContent = event.target.result;\r\n    //         // let contents = JSON.parse(fileContent);\r\n    //         let song = this.readFile(fileContent)\r\n    //         this.props.setSong(song)\r\n    //     }.bind(this);\r\n    //     reader.readAsText(event.target.files[0]);\r\n    // }\r\n\r\n    readText(text) {\r\n        let obj = JSON.parse(text)\r\n        let lyrics = obj.result.track.text.trim().replace(/[’‘]/g, '\\'')\r\n        let song = {}\r\n        song[\"title\"] = obj.result.track.name\r\n        song[\"artist\"] = obj.result.artist\r\n        song[\"lyrics\"] = lyrics.split((/[\\r\\n, ?!:;().\"-]+/)).filter((word) => word !== \"\" && word)\r\n        this.props.setSong(song)\r\n    }\r\n\r\n    // getText(song, callback) {\r\n    //     var request = new XMLHttpRequest();\r\n    //     request.open('GET', 'https://orion.apiseeds.com/api/music/lyric/'+ song.artist + '/' + song.title +'?apikey=W5i0ZMfUmju2xbXNRZbsjpNYzGOMZiavxY4Vz6VlVatxFi8f9wdLAIofgwOP75TK', true);\r\n    //     request.onreadystatechange = () => {\r\n    //         if (request.readyState === 4 && request.status === 200) {\r\n    //             var type = request.getResponseHeader('Content-Type');\r\n    //             if (type.indexOf(\"text\") !== 1) {\r\n    //                 callback(request.responseText)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     request.send();\r\n    // }\r\n\r\n    getSearchResults(obj) {\r\n        let results = obj.response.hits.map((hit) => {return {title: hit.result.title, artist: hit.result.primary_artist.name, lyrics_path: hit.result.path, song_path: hit.result.api_path}})\r\n        console.log(obj)\r\n        console.log(results)\r\n        this.setState({results: results})\r\n    }\r\n\r\n    getLyrics(obj) {\r\n        var request = new XMLHttpRequest();\r\n        request.open('GET', 'https://cors-anywhere.herokuapp.com/'+ obj.response.song.url, true);\r\n        request.onreadystatechange = () => {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                var type = request.getResponseHeader('Content-Type');\r\n                if (type.indexOf(\"text\") !== 1) {\r\n                    const $ = cheerio.load(request.responseText)\r\n                    var lyrics = $('.lyrics').text()\r\n                    lyrics = lyrics.replace(/\\[.*\\]/g, \"\")\r\n                    lyrics = lyrics.trim().replace(/[’‘]/g, '\\'').split((/[\\r\\n, ?!:;().\"-]+/)).filter((word) => word !== \"\" && word)\r\n                }\r\n            }\r\n        }\r\n        request.send();\r\n    }\r\n\r\n    getGenius(endpoint, callback) {\r\n        var request = new XMLHttpRequest();\r\n        console.log('https://api.genius.com' + endpoint + '?access_token=4qtBMiQeR5pD1zFm-vGmFV6j5khGAiRQskTCLXyuGbxeYGbnXrTnXIyA5n2iXjdg')\r\n        request.open('GET', 'https://api.genius.com' + endpoint + '&access_token=4qtBMiQeR5pD1zFm-vGmFV6j5khGAiRQskTCLXyuGbxeYGbnXrTnXIyA5n2iXjdg', true);\r\n        request.onreadystatechange = () => {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n                var type = request.getResponseHeader('Content-Type');\r\n                if (type.indexOf(\"text\") !== 1) {\r\n                    console.log(JSON.parse(request.responseText))\r\n                    callback(JSON.parse(request.responseText))\r\n                }\r\n            }\r\n        }\r\n        request.send();\r\n    }\r\n\r\n    renderSearch(){\r\n        return(\r\n            this.state.results.map((result)=><div><button onClick={()=>{window.location.href = result.song_path}}>{result.title} by <i>{result.artist}</i></button></div>)\r\n        )\r\n\r\n    }\r\n    updateInput(event) {\r\n        this.setState({search: event.target.value})\r\n    }\r\n\r\n    search() {\r\n        this.getGenius('/search?q='+encodeURI(this.state.search), this.getSearchResults)\r\n    }\r\n\r\n    listenForEnter(event) {\r\n        if (event.keyCode === 13) {\r\n            this.search();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            \r\n\r\n            <div id=\"upload\">\r\n                {/* <button onClick={()=>{this.getGenius('/songs/378195', this.getLyrics)}}>Click Here</button> */}\r\n                \r\n                <div id=\"search\">\r\n                    <Input placeholder=\"Search music...\" onChange={this.updateInput}  onKeyDown={this.listenForEnter}/>\r\n                    <button onClick={this.search}>Search</button>\r\n                </div>\r\n\r\n                {this.renderSearch()}\r\n                {/* <button onClick={()=>this.getText(this.readText)}>Get Text</button> */}\r\n                {/* <p>Upload a song file:</p>\r\n                <form>\r\n                    <input type=\"file\" name=\"myFile\" id=\"example\" onChange={(event) => {this.getFile(event)}}/>\r\n                </form> */}\r\n            </div>\r\n            \r\n        );\r\n    \r\n    }\r\n} export default FileUpload;","import React, {Component} from 'react'\r\nimport { Switch, Route, withRouter } from \"react-router-dom\";\r\n\r\nimport Display from './Display'\r\nimport Song from './Song'\r\nimport \"../styles/Game.scss\"\r\nimport Sidebar from './Sidebar'\r\nimport FileUpload from './FileUpload'\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            \r\n        }\r\n        // this.setSong = this.setSong.bind(this);\r\n        // this.discover = this.discover.bind(this)\r\n        // this.forfeit = this.forfeit.bind(this)\r\n    }\r\n    // forfeit() {\r\n    //     this.setState({forfeit: true})\r\n    // }\r\n\r\n    // setSong(song) {\r\n    //     this.setState({song: song, discoveredWords: [], forfeit: false})\r\n    // }\r\n    \r\n    // discover(word, index) {\r\n    //     let temp = this.state.discoveredWords\r\n    //     temp[index]=word;\r\n    //     this.setState({discoveredWords : temp})\r\n    // }\r\n\r\n    render() {\r\n        console.log(window.location.pathname)\r\n        return (\r\n            <div id=\"game\">\r\n                <Sidebar>\r\n                    <div id=\"menu\">\r\n                        <FileUpload setSong={this.setSong}/>\r\n                    </div>\r\n                </Sidebar>\r\n                   \r\n                <Switch location={window.location}>\r\n                        <Route path=\"/butt\" render={()=><div>Hello World</div>}/>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            render={(props) => <div id=\"home\">\r\n                                                    <div className=\"big\">Guess the lyrics...without knowing the song.</div>\r\n                                                    <div>Start by expanding the sidebar and choosing an album to play.</div>\r\n                                                </div>}\r\n                        />\r\n                        <Route\r\n                            path=\"/songs/:genius_id\"\r\n                            render={(props) => <Song {...props}/>}\r\n                        />\r\n                        \r\n                </Switch>\r\n                 \r\n            </div>\r\n        );\r\n    \r\n    }\r\n} export default withRouter(Game);","import React from 'react';\nimport Game from './components/Game'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}